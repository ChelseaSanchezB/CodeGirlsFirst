-- Creating a database

CREATE DATABASE SALES;

USE SALES;

-- Creating 7 tables (store, sales, supply, comp.1,2,3,4)

CREATE TABLE STORE (
	I_ID VARCHAR(2),
    INAME CHAR(20),
    ITYPE CHAR(20),
    PRICE DECIMAL(3,2),
    SOLD INT,
PRIMARY KEY (I_ID)
);

CREATE TABLE SALES (
	I_ID VARCHAR(2),
    SOLD FLOAT,
FOREIGN KEY (I_ID) REFERENCES STORE (I_ID)
); 

CREATE TABLE SUPPLY (
	I_ID VARCHAR(2),
    QUANTITY INT,
    PRICE DECIMAL(3,2),
PRIMARY KEY (PRICE),
FOREIGN KEY (I_ID) REFERENCES STORE (I_ID)
);

CREATE TABLE COMPETITOR_1 (
    I_ID VARCHAR(2),
    PRICE DECIMAL(3,2),
    SOLD INT,
FOREIGN KEY (I_ID) REFERENCES STORE (I_ID)
);

CREATE TABLE COMPETITOR_2 (
    I_ID VARCHAR(2),
    PRICE DECIMAL(3,2),
    SOLD INT
);

CREATE TABLE COMPETITOR_3 (
    I_ID VARCHAR(2),
    PRICE DECIMAL(3,2),
    SOLD INT,
FOREIGN KEY (I_ID) REFERENCES STORE (I_ID)
);

CREATE TABLE COMPETITOR_4 (
    I_ID VARCHAR(2),
    PRICE DECIMAL(3,2),
    SOLD INT,
FOREIGN KEY (I_ID) REFERENCES STORE (I_ID)
);

-- Making alterations

ALTER TABLE STORE
DROP COLUMN ITYPE;

ALTER TABLE STORE
DROP COLUMN SOLD;

ALTER TABLE STORE
MODIFY COLUMN PRICE FLOAT;
ALTER TABLE SUPPLY
MODIFY COLUMN PRICE FLOAT;
ALTER TABLE COMPETITOR_1
MODIFY COLUMN PRICE FLOAT;
ALTER TABLE COMPETITOR_2
MODIFY COLUMN PRICE FLOAT;
ALTER TABLE COMPETITOR_3
MODIFY COLUMN PRICE FLOAT;
ALTER TABLE COMPETITOR_4
MODIFY COLUMN PRICE FLOAT;

-- Filling in my tables

INSERT INTO STORE
(I_ID, INAME, PRICE, SOLD)
VALUES
('I1', 'Ball', 5.00, 15),
('I2', 'Barbie', 12.49, 17),
('I3', 'Play-Doh', 9.99, 32),
('I4', 'Monopoly', 15.99, 10),
('I5', 'Teddy Bear', 12.00, 9),
('I6', 'Nerf gun', 20.00, 29),
('I7', 'Lego', 24.99, 50),
('I8', 'Hot Wheels', 2.00, 45),
('I9', 'UNO', 6.00, 35);

INSERT INTO SALES
(I_ID, SOLD) 
VALUES
('I1', 15),
('I2', 17),
('I3', 32),
('I4', 10),
('I5', 9),
('I6', 29),
('I7', 50),
('I8', 45),
('I9', 35);

INSERT INTO SUPPLY
(I_ID, QUANTITY, PRICE)
VALUES
('I1', 50, 5.00),
('I2', 70, 12.49),
('I3', 60, 9.99),
('I4', 50, 15.99),
('I5', 95, 12),
('I6', 80, 20),
('I7', 70, 24.99),
('I8', 60, 2.00),
('I9', 71, 5.50);

INSERT INTO COMPETITOR_1
(I_ID, PRICE, SOLD)
VALUES
('I2', 10.00, 9),
('I5', 7.00, 25);

INSERT INTO COMPETITOR_2
(I_ID, PRICE, SOLD)
VALUES
('I2', 14.99, 30),
('I3', 12.50, 29),
('I4', 20.00, 42),
('I6', 24.99, 38),
('I7', 19.99, 54),
('I8', 1.50, 32);

INSERT INTO COMPETITOR_3
(I_ID, PRICE, SOLD)
VALUES
('I1', 8.99, 49),
('I3', 7.00, 15);

INSERT INTO COMPETITOR_4
(I_ID, PRICE, SOLD)
VALUES
('I7', 50.00, 250);

-- Visualising my tables

SHOW TABLES FROM SALES;
SELECT * FROM STORE;
SELECT * FROM SALES;

 -- How much did the store make in profit in the past month?
CREATE VIEW STORE_PROFIT
AS
SELECT PRICE, SOLD
FROM STORE;

SELECT PRICE, SOLD, PRICE*SOLD AS PROFIT
FROM STORE_PROFIT;

SELECT SUM(PROFIT)
FROM STORE_PROFIT;

-- What items does the store, competitor 1 and 2 all sell? (subquery)
SELECT s.I_ID AS store_ID, c1.I_ID AS comp1_ID, c2.I_ID AS comp2_ID
FROM STORE s, COMPETITOR_1 c1, COMPETITOR_2 c2
WHERE s.I_ID = c1.I_ID
AND s.I_ID = c2.I_ID;


-- Trigger to update new sold items (Trigger- INCOMPLETE)
DELIMITER //
CREATE TRIGGER New_Sales5
AFTER INSERT ON SALES
FOR EACH ROW
BEGIN
	IF EXISTS (SELECT * FROM SALES WHERE I_ID = NEW.I_ID) THEN 
		SET SOLD = SOLD + NEW.SOLD
		WHERE I_ID = NEW.I_ID;
	END IF;
END//
DELIMITER ;

INSERT INTO SALES
(I_ID, SOLD)
VALUES ('I2', 4.0);

-- Does competitor 4 sell more of item i than the store?


-- Which items does the store sell in common with competitor 2? (Joins with views)
CREATE VIEW competitors_items2
AS
SELECT s.I_ID AS stores_items, 
		c2.I_ID AS competitors_items,
        sa.SOLD
FROM STORE s
INNER JOIN COMPETITOR_2 c2
INNER JOIN SALES sa
ON s.I_ID = c2.I_ID
AND sa.SOLD > 0;

SELECT * FROM competitors_items2;

-- Creating a stored procedure to call a query repeatedly (stored procedure)
DELIMITER //
CREATE PROCEDURE PriceOfGoods()
BEGIN
	SELECT I_ID, PRICE FROM STORE;
END//
DELIMITER ;

CALL PriceOfGoods();